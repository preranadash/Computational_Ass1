#16_JACOBI
import numpy as np

def jacobi(coefficients, constants, x0=None, tol=1e-2, max_iter=1000):
    n = len(constants)
    if x0 is None:
        x0 = np.zeros(n)

    x = np.copy(x0)
    x_new = np.empty_like(x)

    for iteration in range(max_iter):
        for i in range(n):
            sigma = 0
            for j in range(n):
                if j != i:
                    sigma += coefficients[i, j] * x[j]
            x_new[i] = (constants[i] - sigma) / coefficients[i, i]

        if np.linalg.norm(x_new - x) < tol:
            break

        x = np.copy(x_new)

    return x

coefficients = np.array([[0.2, 0.1, 1, 1, 0],
                         [0.1, 4, -1, 1, -1],
                         [ 1, -1, 60, 0, -2],
                         [ 1, 1, 0, 8, 4],
                         [ 0, -1, -2, 4, 700]])

constants = np.array([ 7.859713071, 0.422926408, -0.073592239, -0.540643016, 0.010626163])

solution = jacobi(coefficients, constants)
print("Solution using Jacobi method:", solution)




